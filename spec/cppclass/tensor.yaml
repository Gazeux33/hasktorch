signature: Tensor
cppname: at::Tensor
hsname: Tensor
headers:
- ATen/Tensor.h
- ATen/Functions.h
- ATen/TensorOperators.h
- vector
functions: []
constructors:
- new() -> Tensor
- new(Tensor x) -> Tensor
methods:
- dim() -> int64_t
- storage_offset() -> int64_t
#- contiguous(MemoryFormat memory_format=MemoryFormat::Contiguous) -> Tensor
- contiguous() -> Tensor
- size(int64_t dim) -> int64_t
- stride(int64_t dim) -> int64_t
- defined() -> bool
- reset() -> void
#- warning( push ) -> #pragma
#- warning( disable : 4522 ) -> #pragma
- operator=(Tensor x) -> Tensor
#- operator=(Scalar v) -> Tensor
#- operator=(Tensor) -> Tensor
#- operator=(Tensor) -> Tensor
- is_same(Tensor other) -> bool
- use_count() -> size_t
- weak_use_count() -> size_t
- toString() -> std::string
- sizes() -> IntArrayRef
- strides() -> IntArrayRef
#- names() -> DimnameList
- ndimension() -> int64_t
#- is_contiguous(at::MemoryFormat memory_format=at::MemoryFormat::Contiguous) -> bool
- is_contiguous() -> bool
- is_non_overlapping_and_dense() -> bool
- nbytes() -> size_t
- numel() -> int64_t
- itemsize() -> size_t
- element_size() -> int64_t
#- type() -> DeprecatedTypeProperties
#- key_set() -> DispatchKeySet
- scalar_type() -> ScalarType
- has_storage() -> bool
- storage() -> Storage
- is_alias_of(Tensor other) -> bool
- toType(ScalarType t) -> Tensor
- toBackend(Backend b) -> Tensor
#- is_variable() -> bool
- layout() -> Layout
#- dtype() -> caffe2::TypeMeta
#- device() -> Device
- get_device() -> int64_t
- is_cuda() -> bool
- is_xpu() -> bool
- is_hip() -> bool
- is_sparse() -> bool
- is_mkldnn() -> bool
- is_vulkan() -> bool
- is_metal() -> bool
- is_quantized() -> bool
- is_meta() -> bool
#- quantizer() -> QuantizerPtr
- has_names() -> bool
#- get_named_tensor_meta() -> NamedTensorMeta*
#- get_named_tensor_meta() -> NamedTensorMeta*
- options() -> TensorOptions
- data_ptr() -> void*
#- data_ptr() -> T*
#- data() -> T*
#- item() -> T
- item<int64_t>() -> int64_t
- item<float>() -> float
- item<double>() -> double
- print() -> void
#- accessor() -> TensorAccessor<T,N>
#- accessor() -> TensorAccessor<T,N>
#- generic_packed_accessor() -> GenericPackedTensorAccessor<T,N,PtrTraits,index_t>
#- generic_packed_accessor() -> GenericPackedTensorAccessor<T,N>
#- packed_accessor32() -> PackedTensorAccessor32<T,N,PtrTraits>
#- packed_accessor32() -> PackedTensorAccessor32<T,N,PtrTraits>
#- packed_accessor64() -> PackedTensorAccessor64<T,N,PtrTraits>
#- packed_accessor64() -> PackedTensorAccessor64<T,N,PtrTraits>
#- packed_accessor() -> GenericPackedTensorAccessor<T,N,PtrTraits,index_t>
#- packed_accessor() -> GenericPackedTensorAccessor<T,N,PtrTraits,index_t>
#- operator~() -> Tensor
#- operator-() -> Tensor
- operator+=(Tensor  other) -> void
- operator+=(Scalar other) -> void
- operator-=(Tensor  other) -> void
- operator-=(Scalar other) -> void
- operator*=(Tensor  other) -> void
- operator*=(Scalar other) -> void
- operator/=(Tensor  other) -> void
- operator/=(Scalar other) -> void
#- operator|=(Tensor  other) -> void
#- operator^=(Tensor  other) -> void
- operator[](Scalar index) -> Tensor
- operator[](Tensor index) -> Tensor
- operator[](int64_t index) -> Tensor
# - index(ArrayRef<at::indexing::TensorIndex> indices) -> Tensor
# - index(std::initializer_list<at::indexing::TensorIndex> indices) -> Tensor
# - index_put_(ArrayRef<at::indexing::TensorIndex> indices, Tensor  rhs) -> Tensor
# - index_put_(ArrayRef<at::indexing::TensorIndex> indices, Scalar v) -> Tensor
# - index_put_(std::initializer_list<at::indexing::TensorIndex> indices, Tensor  rhs) -> Tensor
# - index_put_(std::initializer_list<at::indexing::TensorIndex> indices, Scalar v) -> Tensor
- cpu() -> Tensor
- cuda() -> Tensor
- hip() -> Tensor
- vulkan() -> Tensor
- metal() -> Tensor
- set_requires_grad(bool requires_grad) -> Tensor
- requires_grad() -> bool
- mutable_grad() -> Tensor
- grad() -> Tensor
- backward(Tensor  gradient={}, bool keep_graph=false, bool create_graph=false) -> void
- fw_grad(uint64_t level) -> Tensor
- set_fw_grad(Tensor new_grad, uint64_t level, bool is_inplace_op) -> void
- set_data(Tensor  new_data) -> void
- data() -> Tensor
- is_leaf() -> bool
- output_nr() -> int64_t
- _version() -> int64_t
- requires_grad_(bool requires_grad=true) -> Tensor
- retain_grad() -> void
- _fw_primal(int64_t level) -> Tensor
- rename(DimnameList names) -> Tensor
- align_to(DimnameList names) -> Tensor
- align_to(DimnameList order, int64_t ellipsis_idx) -> Tensor
- align_as(Tensor  other) -> Tensor
- refine_names(DimnameList names) -> Tensor
- abs() -> Tensor
- abs_() -> Tensor
- absolute() -> Tensor
- absolute_() -> Tensor
- angle() -> Tensor
- sgn() -> Tensor
- sgn_() -> Tensor
- conj() -> Tensor
- acos() -> Tensor
- acos_() -> Tensor
- arccos() -> Tensor
- arccos_() -> Tensor
- add(Tensor  other, Scalar alpha=1) -> Tensor
- add_(Tensor  other, Scalar alpha=1) -> Tensor
- add(Scalar other, Scalar alpha=1) -> Tensor
- add_(Scalar other, Scalar alpha=1) -> Tensor
- addmv(Tensor  mat, Tensor  vec, Scalar beta=1, Scalar alpha=1) -> Tensor
- addmv_(Tensor  mat, Tensor  vec, Scalar beta=1, Scalar alpha=1) -> Tensor
- addr(Tensor  vec1, Tensor  vec2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addr_(Tensor  vec1, Tensor  vec2, Scalar beta=1, Scalar alpha=1) -> Tensor
- all(int64_t dim, bool keepdim=false) -> Tensor
- all(Dimname dim, bool keepdim=false) -> Tensor
- allclose(Tensor  other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) -> bool
- any(int64_t dim, bool keepdim=false) -> Tensor
- any(Dimname dim, bool keepdim=false) -> Tensor
- acosh() -> Tensor
- acosh_() -> Tensor
- arccosh() -> Tensor
- arccosh_() -> Tensor
- asinh() -> Tensor
- asinh_() -> Tensor
- arcsinh() -> Tensor
- arcsinh_() -> Tensor
- atanh() -> Tensor
- atanh_() -> Tensor
- arctanh() -> Tensor
- arctanh_() -> Tensor
- asin() -> Tensor
- asin_() -> Tensor
- arcsin() -> Tensor
- arcsin_() -> Tensor
- atan() -> Tensor
- atan_() -> Tensor
- arctan() -> Tensor
- arctan_() -> Tensor
- baddbmm(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- baddbmm_(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- bernoulli(Generator generator=nullptr) -> Tensor
- bernoulli_(Tensor  p, Generator generator=nullptr) -> Tensor
- bernoulli_(double p=0.5, Generator generator=nullptr) -> Tensor
- bernoulli(double p, Generator generator=nullptr) -> Tensor
- bincount(Tensor  weights={}, int64_t minlength=0) -> Tensor
- bitwise_not() -> Tensor
- bitwise_not_() -> Tensor
- copysign(Tensor  other) -> Tensor
- copysign_(Tensor  other) -> Tensor
- copysign(Scalar other) -> Tensor
- copysign_(Scalar other) -> Tensor
- logical_not() -> Tensor
- logical_not_() -> Tensor
- logical_xor(Tensor  other) -> Tensor
- logical_xor_(Tensor  other) -> Tensor
- logical_and(Tensor  other) -> Tensor
- logical_and_(Tensor  other) -> Tensor
- logical_or(Tensor  other) -> Tensor
- logical_or_(Tensor  other) -> Tensor
- bmm(Tensor  mat2) -> Tensor
- broadcast_to(IntArrayRef size) -> Tensor
- ceil() -> Tensor
- ceil_() -> Tensor
- unsafe_chunk(int64_t chunks, int64_t dim=0) -> TensorList
- chunk(int64_t chunks, int64_t dim=0) -> TensorList
#- tensor_split(int64_t sections, int64_t dim=0) -> TensorList
- tensor_split(IntArrayRef indices, int64_t dim=0) -> TensorList
- tensor_split(Tensor  tensor_indices_or_sections, int64_t dim=0) -> TensorList
- clamp_max(Scalar max) -> Tensor
- clamp_max_(Scalar max) -> Tensor
- clamp_min(Scalar min) -> Tensor
- clamp_min_(Scalar min) -> Tensor
#- __dispatch_contiguous(MemoryFormat memory_format=MemoryFormat::Contiguous) -> Tensor
- __dispatch_contiguous() -> Tensor
- copy_(Tensor  src, bool non_blocking=false) -> Tensor
- cos() -> Tensor
- cos_() -> Tensor
- cosh() -> Tensor
- cosh_() -> Tensor
- count_nonzero(IntArrayRef dim) -> Tensor
- cummax(int64_t dim) -> (Tensor,Tensor)
- cummax(Dimname dim) -> (Tensor,Tensor)
- cummin(int64_t dim) -> (Tensor,Tensor)
- cummin(Dimname dim) -> (Tensor,Tensor)
- det() -> Tensor
- diag_embed(int64_t offset=0, int64_t dim1=-2, int64_t dim2=-1) -> Tensor
- diagflat(int64_t offset=0) -> Tensor
- diagonal(int64_t offset=0, int64_t dim1=0, int64_t dim2=1) -> Tensor
- diagonal(Dimname outdim, Dimname dim1, Dimname dim2, int64_t offset=0) -> Tensor
- fill_diagonal_(Scalar fill_value, bool wrap=false) -> Tensor
- div(Tensor  other) -> Tensor
- div_(Tensor  other) -> Tensor
- div(Tensor  other, std::string rounding_mode) -> Tensor
- div_(Tensor  other, std::string rounding_mode) -> Tensor
- div(Scalar other) -> Tensor
- div_(Scalar other) -> Tensor
- div(Scalar other, std::string rounding_mode) -> Tensor
- div_(Scalar other, std::string rounding_mode) -> Tensor
- divide(Tensor  other) -> Tensor
- divide_(Tensor  other) -> Tensor
- divide(Scalar other) -> Tensor
- divide_(Scalar other) -> Tensor
- divide(Tensor  other, std::string rounding_mode) -> Tensor
- divide_(Tensor  other, std::string rounding_mode) -> Tensor
- divide(Scalar other, std::string rounding_mode) -> Tensor
- divide_(Scalar other, std::string rounding_mode) -> Tensor
- true_divide(Tensor  other) -> Tensor
- true_divide_(Tensor  other) -> Tensor
- true_divide(Scalar other) -> Tensor
- true_divide_(Scalar other) -> Tensor
- dot(Tensor  tensor) -> Tensor
- vdot(Tensor  other) -> Tensor
- new_empty(IntArrayRef size, TensorOptions options={}) -> Tensor
- new_empty_strided(IntArrayRef size, IntArrayRef stride, TensorOptions options={}) -> Tensor
- new_full(IntArrayRef size, Scalar fill_value, TensorOptions options={}) -> Tensor
- resize_(IntArrayRef size) -> Tensor
- new_zeros(IntArrayRef size, TensorOptions options={}) -> Tensor
- erf() -> Tensor
- erf_() -> Tensor
- erfc() -> Tensor
- erfc_() -> Tensor
- exp() -> Tensor
- exp_() -> Tensor
- exp2() -> Tensor
- exp2_() -> Tensor
- expm1() -> Tensor
- expm1_() -> Tensor
- expand(IntArrayRef size, bool implicit=false) -> Tensor
- expand_as(Tensor  other) -> Tensor
- flatten(int64_t start_dim=0, int64_t end_dim=-1) -> Tensor
- flatten(int64_t start_dim, int64_t end_dim, Dimname out_dim) -> Tensor
- flatten(Dimname start_dim, Dimname end_dim, Dimname out_dim) -> Tensor
- flatten(DimnameList dims, Dimname out_dim) -> Tensor
- unflatten(Dimname dim, IntArrayRef sizes, DimnameList names) -> Tensor
- fill_(Scalar value) -> Tensor
- fill_(Tensor  value) -> Tensor
- floor() -> Tensor
- floor_() -> Tensor
- floor_divide(Tensor  other) -> Tensor
- floor_divide_(Tensor  other) -> Tensor
- floor_divide(Scalar other) -> Tensor
- floor_divide_(Scalar other) -> Tensor
- frac() -> Tensor
- frac_() -> Tensor
- gcd(Tensor  other) -> Tensor
- gcd_(Tensor  other) -> Tensor
- lcm(Tensor  other) -> Tensor
- lcm_(Tensor  other) -> Tensor
- index_copy_(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_copy(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_copy_(Dimname dim, Tensor  index, Tensor  source) -> Tensor
- index_copy(Dimname dim, Tensor  index, Tensor  source) -> Tensor
- inverse() -> Tensor
- isclose(Tensor  other, double rtol=1e-05, double atol=1e-08, bool equal_nan=false) -> Tensor
- isnan() -> Tensor
- is_distributed() -> bool
- is_floating_point() -> bool
- is_complex() -> bool
- isreal() -> Tensor
- is_nonzero() -> bool
- is_same_size(Tensor  other) -> bool
- is_signed() -> bool
- kron(Tensor  other) -> Tensor
- kthvalue(int64_t k, int64_t dim=-1, bool keepdim=false) -> (Tensor,Tensor)
- kthvalue(int64_t k, Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- ldexp(Tensor  other) -> Tensor
- ldexp_(Tensor  other) -> Tensor
- log() -> Tensor
- log_() -> Tensor
- log10() -> Tensor
- log10_() -> Tensor
- log1p() -> Tensor
- log1p_() -> Tensor
- log2() -> Tensor
- log2_() -> Tensor
- logaddexp(Tensor  other) -> Tensor
- logaddexp2(Tensor  other) -> Tensor
- xlogy(Tensor  other) -> Tensor
- xlogy(Scalar other) -> Tensor
- xlogy_(Tensor  other) -> Tensor
- xlogy_(Scalar other) -> Tensor
- logdet() -> Tensor
- logcumsumexp(int64_t dim) -> Tensor
- logcumsumexp(Dimname dim) -> Tensor
- logsumexp(IntArrayRef dim, bool keepdim=false) -> Tensor
- logsumexp(DimnameList dim, bool keepdim=false) -> Tensor
- matmul(Tensor  other) -> Tensor
- matrix_power(int64_t n) -> Tensor
- matrix_exp() -> Tensor
- max(int64_t dim, bool keepdim=false) -> (Tensor,Tensor)
- max(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- amax(IntArrayRef dim={}, bool keepdim=false) -> Tensor
- median() -> Tensor
- median(int64_t dim, bool keepdim=false) -> (Tensor,Tensor)
- median(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- nanmedian() -> Tensor
- nanmedian(int64_t dim, bool keepdim=false) -> (Tensor,Tensor)
- nanmedian(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- min(int64_t dim, bool keepdim=false) -> (Tensor,Tensor)
- min(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- amin(IntArrayRef dim={}, bool keepdim=false) -> Tensor
- mm(Tensor  mat2) -> Tensor
- mode(int64_t dim=-1, bool keepdim=false) -> (Tensor,Tensor)
- mode(Dimname dim, bool keepdim=false) -> (Tensor,Tensor)
- mul(Tensor  other) -> Tensor
- mul_(Tensor  other) -> Tensor
- mul(Scalar other) -> Tensor
- mul_(Scalar other) -> Tensor
- multiply(Tensor  other) -> Tensor
- multiply_(Tensor  other) -> Tensor
- multiply(Scalar other) -> Tensor
- multiply_(Scalar other) -> Tensor
- mv(Tensor  vec) -> Tensor
- mvlgamma(int64_t p) -> Tensor
- mvlgamma_(int64_t p) -> Tensor
- narrow_copy(int64_t dim, int64_t start, int64_t length) -> Tensor
- narrow(int64_t dim, int64_t start, int64_t length) -> Tensor
- narrow(int64_t dim, Tensor  start, int64_t length) -> Tensor
- permute(IntArrayRef dims) -> Tensor
- movedim(IntArrayRef source, IntArrayRef destination) -> Tensor
#- movedim(int64_t source, int64_t destination) -> Tensor
- moveaxis(IntArrayRef source, IntArrayRef destination) -> Tensor
#- moveaxis(int64_t source, int64_t destination) -> Tensor
- numpy_T() -> Tensor
- is_pinned() -> bool
- pin_memory() -> Tensor
- pinverse(double rcond=1e-15) -> Tensor
- rad2deg() -> Tensor
- rad2deg_() -> Tensor
- deg2rad() -> Tensor
- deg2rad_() -> Tensor
- ravel() -> Tensor
- reciprocal() -> Tensor
- reciprocal_() -> Tensor
- neg() -> Tensor
- neg_() -> Tensor
- negative() -> Tensor
- negative_() -> Tensor
- repeat(IntArrayRef repeats) -> Tensor
- reshape(IntArrayRef shape) -> Tensor
- reshape_as(Tensor  other) -> Tensor
- round() -> Tensor
- round_() -> Tensor
- relu() -> Tensor
- relu_() -> Tensor
- prelu(Tensor  weight) -> Tensor
- prelu_backward(Tensor  grad_output, Tensor  weight) -> (Tensor,Tensor)
- hardshrink(Scalar lambd=0.5) -> Tensor
- hardshrink_backward(Tensor  grad_out, Scalar lambd) -> Tensor
- rsqrt() -> Tensor
- rsqrt_() -> Tensor
- select(Dimname dim, int64_t index) -> Tensor
- select(int64_t dim, int64_t index) -> Tensor
- sigmoid() -> Tensor
- sigmoid_() -> Tensor
- sin() -> Tensor
- sin_() -> Tensor
- sinc() -> Tensor
- sinc_() -> Tensor
- sinh() -> Tensor
- sinh_() -> Tensor
- detach() -> Tensor
- detach_() -> Tensor
- size(Dimname dim) -> int64_t
- slogdet() -> (Tensor,Tensor)
- smm(Tensor  mat2) -> Tensor
- unsafe_split(int64_t split_size, int64_t dim=0) -> TensorList
- split(int64_t split_size, int64_t dim=0) -> TensorList
- unsafe_split_with_sizes(IntArrayRef split_sizes, int64_t dim=0) -> TensorList
- split_with_sizes(IntArrayRef split_sizes, int64_t dim=0) -> TensorList
- squeeze() -> Tensor
- squeeze(int64_t dim) -> Tensor
- squeeze(Dimname dim) -> Tensor
- squeeze_() -> Tensor
- squeeze_(int64_t dim) -> Tensor
- squeeze_(Dimname dim) -> Tensor
- sspaddmm(Tensor  mat1, Tensor  mat2, Scalar beta=1, Scalar alpha=1) -> Tensor
- stride(Dimname dim) -> int64_t
- sum_to_size(IntArrayRef size) -> Tensor
- sqrt() -> Tensor
- sqrt_() -> Tensor
- square() -> Tensor
- square_() -> Tensor
- std(bool unbiased=true) -> Tensor
- std(IntArrayRef dim, bool unbiased=true, bool keepdim=false) -> Tensor
- std(DimnameList dim, bool unbiased=true, bool keepdim=false) -> Tensor
- t() -> Tensor
- t_() -> Tensor
- tan() -> Tensor
- tan_() -> Tensor
- tanh() -> Tensor
- tanh_() -> Tensor
- tile(IntArrayRef dims) -> Tensor
- transpose(int64_t dim0, int64_t dim1) -> Tensor
- transpose(Dimname dim0, Dimname dim1) -> Tensor
- transpose_(int64_t dim0, int64_t dim1) -> Tensor
- flip(IntArrayRef dims) -> Tensor
- fliplr() -> Tensor
- flipud() -> Tensor
- roll(IntArrayRef shifts, IntArrayRef dims={}) -> Tensor
- rot90(int64_t k=1, IntArrayRef dims={0,1}) -> Tensor
- trunc() -> Tensor
- trunc_() -> Tensor
- fix() -> Tensor
- fix_() -> Tensor
- type_as(Tensor  other) -> Tensor
- unsqueeze(int64_t dim) -> Tensor
- unsqueeze_(int64_t dim) -> Tensor
- var(bool unbiased=true) -> Tensor
- var(IntArrayRef dim, bool unbiased=true, bool keepdim=false) -> Tensor
- var(DimnameList dim, bool unbiased=true, bool keepdim=false) -> Tensor
- view_as(Tensor  other) -> Tensor
- where(Tensor  condition, Tensor  other) -> Tensor
- norm(Scalar p=2) -> Tensor
- zero_() -> Tensor
- sub(Tensor  other, Scalar alpha=1) -> Tensor
- sub_(Tensor  other, Scalar alpha=1) -> Tensor
- sub(Scalar other, Scalar alpha=1) -> Tensor
- sub_(Scalar other, Scalar alpha=1) -> Tensor
- subtract(Tensor  other, Scalar alpha=1) -> Tensor
- subtract_(Tensor  other, Scalar alpha=1) -> Tensor
- subtract(Scalar other, Scalar alpha=1) -> Tensor
- subtract_(Scalar other, Scalar alpha=1) -> Tensor
- heaviside(Tensor  values) -> Tensor
- heaviside_(Tensor  values) -> Tensor
- addmm(Tensor  mat1, Tensor  mat2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addmm_(Tensor  mat1, Tensor  mat2, Scalar beta=1, Scalar alpha=1) -> Tensor
- sparse_resize_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) -> Tensor
- sparse_resize_and_clear_(IntArrayRef size, int64_t sparse_dim, int64_t dense_dim) -> Tensor
- sparse_mask(Tensor  mask) -> Tensor
- to_dense() -> Tensor
- sparse_dim() -> int64_t
- _dimI() -> int64_t
- dense_dim() -> int64_t
- _dimV() -> int64_t
- _nnz() -> int64_t
- coalesce() -> Tensor
- is_coalesced() -> bool
- _indices() -> Tensor
- _values() -> Tensor
- _coalesced_(bool coalesced) -> Tensor
- indices() -> Tensor
- values() -> Tensor
- unbind(int64_t dim=0) -> TensorList
- unbind(Dimname dim) -> TensorList
- to_sparse(int64_t sparse_dim) -> Tensor
- to_sparse() -> Tensor
- to_mkldnn() -> Tensor
- dequantize() -> Tensor
- q_scale() -> double
- q_zero_point() -> int64_t
- q_per_channel_scales() -> Tensor
- q_per_channel_zero_points() -> Tensor
- q_per_channel_axis() -> int64_t
- int_repr() -> Tensor
- qscheme() -> QScheme
- to(TensorOptions  options, bool non_blocking=false, bool copy=false) -> Tensor
- to(Device device, ScalarType dtype, bool non_blocking=false, bool copy=false) -> Tensor
- to(ScalarType dtype, bool non_blocking=false, bool copy=false) -> Tensor
- to(Tensor  other, bool non_blocking=false, bool copy=false) -> Tensor
- item() -> Scalar
- set_(Storage source) -> Tensor
- set_(Storage source, int64_t storage_offset, IntArrayRef size, IntArrayRef stride={}) -> Tensor
- set_(Tensor  source) -> Tensor
- set_() -> Tensor
- is_set_to(Tensor  tensor) -> bool
- masked_fill_(Tensor  mask, Scalar value) -> Tensor
- masked_fill(Tensor  mask, Scalar value) -> Tensor
- masked_fill_(Tensor  mask, Tensor  value) -> Tensor
- masked_fill(Tensor  mask, Tensor  value) -> Tensor
- masked_scatter_(Tensor  mask, Tensor  source) -> Tensor
- masked_scatter(Tensor  mask, Tensor  source) -> Tensor
- view(IntArrayRef size) -> Tensor
- view(ScalarType dtype) -> Tensor
- put_(Tensor  index, Tensor  source, bool accumulate=false) -> Tensor
- index_add_(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_add(int64_t dim, Tensor  index, Tensor  source) -> Tensor
- index_add(Dimname dim, Tensor  index, Tensor  source) -> Tensor
- index_fill_(int64_t dim, Tensor  index, Scalar value) -> Tensor
- index_fill(int64_t dim, Tensor  index, Scalar value) -> Tensor
- index_fill_(int64_t dim, Tensor  index, Tensor  value) -> Tensor
- index_fill(int64_t dim, Tensor  index, Tensor  value) -> Tensor
- index_fill_(Dimname dim, Tensor  index, Scalar value) -> Tensor
- index_fill_(Dimname dim, Tensor  index, Tensor  value) -> Tensor
- index_fill(Dimname dim, Tensor  index, Scalar value) -> Tensor
- index_fill(Dimname dim, Tensor  index, Tensor  value) -> Tensor
- scatter_(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter_(int64_t dim, Tensor  index, Scalar value) -> Tensor
- scatter(int64_t dim, Tensor  index, Scalar value) -> Tensor
- scatter(Dimname dim, Tensor  index, Tensor  src) -> Tensor
- scatter(Dimname dim, Tensor  index, Scalar value) -> Tensor
- scatter_(int64_t dim, Tensor  index, Tensor  src, std::string reduce) -> Tensor
- scatter_(int64_t dim, Tensor  index, Scalar value, std::string reduce) -> Tensor
- scatter_add_(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter_add(int64_t dim, Tensor  index, Tensor  src) -> Tensor
- scatter_add(Dimname dim, Tensor  index, Tensor  src) -> Tensor
- eq_(Scalar other) -> Tensor
- eq_(Tensor  other) -> Tensor
- bitwise_and(Scalar other) -> Tensor
- bitwise_and(Tensor  other) -> Tensor
- bitwise_and_(Scalar other) -> Tensor
- bitwise_and_(Tensor  other) -> Tensor
- __and__(Scalar other) -> Tensor
- __and__(Tensor  other) -> Tensor
- __iand__(Scalar other) -> Tensor
- __iand__(Tensor  other) -> Tensor
- bitwise_or(Scalar other) -> Tensor
- bitwise_or(Tensor  other) -> Tensor
- bitwise_or_(Scalar other) -> Tensor
- bitwise_or_(Tensor  other) -> Tensor
- __or__(Scalar other) -> Tensor
- __or__(Tensor  other) -> Tensor
- __ior__(Scalar other) -> Tensor
- __ior__(Tensor  other) -> Tensor
- bitwise_xor(Scalar other) -> Tensor
- bitwise_xor(Tensor  other) -> Tensor
- bitwise_xor_(Scalar other) -> Tensor
- bitwise_xor_(Tensor  other) -> Tensor
- __xor__(Scalar other) -> Tensor
- __xor__(Tensor  other) -> Tensor
- __ixor__(Scalar other) -> Tensor
- __ixor__(Tensor  other) -> Tensor
- __lshift__(Scalar other) -> Tensor
- __lshift__(Tensor  other) -> Tensor
- __ilshift__(Scalar other) -> Tensor
- __ilshift__(Tensor  other) -> Tensor
- __rshift__(Scalar other) -> Tensor
- __rshift__(Tensor  other) -> Tensor
- __irshift__(Scalar other) -> Tensor
- __irshift__(Tensor  other) -> Tensor
- atan2_(Tensor  other) -> Tensor
- tril_(int64_t diagonal=0) -> Tensor
- triu_(int64_t diagonal=0) -> Tensor
- digamma_() -> Tensor
- polygamma_(int64_t n) -> Tensor
- renorm_(Scalar p, int64_t dim, Scalar maxnorm) -> Tensor
- lerp_(Tensor  end, Scalar weight) -> Tensor
- lerp_(Tensor  end, Tensor  weight) -> Tensor
- fmod_(Scalar other) -> Tensor
- fmod_(Tensor  other) -> Tensor
- remainder_(Scalar other) -> Tensor
- remainder_(Tensor  other) -> Tensor
- addbmm_(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addbmm(Tensor  batch1, Tensor  batch2, Scalar beta=1, Scalar alpha=1) -> Tensor
- addcdiv_(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- diag(int64_t diagonal=0) -> Tensor
- triu(int64_t diagonal=0) -> Tensor
- tril(int64_t diagonal=0) -> Tensor
- trace() -> Tensor
- ne(Scalar other) -> Tensor
- ne(Tensor  other) -> Tensor
- ne_(Scalar other) -> Tensor
- ne_(Tensor  other) -> Tensor
- not_equal(Scalar other) -> Tensor
- not_equal(Tensor  other) -> Tensor
- not_equal_(Scalar other) -> Tensor
- not_equal_(Tensor  other) -> Tensor
- eq(Scalar other) -> Tensor
- eq(Tensor  other) -> Tensor
- ge(Scalar other) -> Tensor
- ge(Tensor  other) -> Tensor
- ge_(Scalar other) -> Tensor
- ge_(Tensor  other) -> Tensor
- greater_equal(Scalar other) -> Tensor
- greater_equal(Tensor  other) -> Tensor
- greater_equal_(Scalar other) -> Tensor
- greater_equal_(Tensor  other) -> Tensor
- le(Scalar other) -> Tensor
- le(Tensor  other) -> Tensor
- le_(Scalar other) -> Tensor
- le_(Tensor  other) -> Tensor
- less_equal(Scalar other) -> Tensor
- less_equal(Tensor  other) -> Tensor
- less_equal_(Scalar other) -> Tensor
- less_equal_(Tensor  other) -> Tensor
- gt(Scalar other) -> Tensor
- gt(Tensor  other) -> Tensor
- gt_(Scalar other) -> Tensor
- gt_(Tensor  other) -> Tensor
- greater(Scalar other) -> Tensor
- greater(Tensor  other) -> Tensor
- greater_(Scalar other) -> Tensor
- greater_(Tensor  other) -> Tensor
- lt(Scalar other) -> Tensor
- lt(Tensor  other) -> Tensor
- lt_(Scalar other) -> Tensor
- lt_(Tensor  other) -> Tensor
- less(Scalar other) -> Tensor
- less(Tensor  other) -> Tensor
- less_(Scalar other) -> Tensor
- less_(Tensor  other) -> Tensor
- take(Tensor  index) -> Tensor
- index_select(int64_t dim, Tensor  index) -> Tensor
- index_select(Dimname dim, Tensor  index) -> Tensor
- masked_select(Tensor  mask) -> Tensor
- nonzero() -> Tensor
- nonzero_numpy() -> TensorList
- gather(int64_t dim, Tensor  index, bool sparse_grad=false) -> Tensor
- gather(Dimname dim, Tensor  index, bool sparse_grad=false) -> Tensor
- addcmul(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- addcmul_(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- addcdiv(Tensor  tensor1, Tensor  tensor2, Scalar value=1) -> Tensor
- lstsq(Tensor  A) -> (Tensor,Tensor)
- triangular_solve(Tensor  A, bool upper=true, bool transpose=false, bool unitriangular=false) -> (Tensor,Tensor)
- symeig(bool eigenvectors=false, bool upper=true) -> (Tensor,Tensor)
- eig(bool eigenvectors=false) -> (Tensor,Tensor)
- svd(bool some=true, bool compute_uv=true) -> (Tensor,Tensor,Tensor)
- swapaxes(int64_t axis0, int64_t axis1) -> Tensor
- swapaxes_(int64_t axis0, int64_t axis1) -> Tensor
- swapdims(int64_t dim0, int64_t dim1) -> Tensor
- swapdims_(int64_t dim0, int64_t dim1) -> Tensor
- cholesky(bool upper=false) -> Tensor
- cholesky_solve(Tensor  input2, bool upper=false) -> Tensor
- solve(Tensor  A) -> (Tensor,Tensor)
- cholesky_inverse(bool upper=false) -> Tensor
- qr(bool some=true) -> (Tensor,Tensor)
- geqrf() -> (Tensor,Tensor)
- orgqr(Tensor  input2) -> Tensor
- ormqr(Tensor  input2, Tensor  input3, bool left=true, bool transpose=false) -> Tensor
- lu_solve(Tensor  LU_data, Tensor  LU_pivots) -> Tensor
- lgamma_() -> Tensor
- lgamma() -> Tensor
- digamma() -> Tensor
- polygamma(int64_t n) -> Tensor
- erfinv() -> Tensor
- erfinv_() -> Tensor
- i0() -> Tensor
- i0_() -> Tensor
- sign() -> Tensor
- sign_() -> Tensor
- signbit() -> Tensor
- dist(Tensor  other, Scalar p=2) -> Tensor
- atan2(Tensor  other) -> Tensor
- lerp(Tensor  end, Scalar weight) -> Tensor
- lerp(Tensor  end, Tensor  weight) -> Tensor
- histc(int64_t bins=100, Scalar min=0, Scalar max=0) -> Tensor
- fmod(Scalar other) -> Tensor
- fmod(Tensor  other) -> Tensor
- hypot(Tensor  other) -> Tensor
- hypot_(Tensor  other) -> Tensor
- igamma(Tensor  other) -> Tensor
- igamma_(Tensor  other) -> Tensor
- igammac(Tensor  other) -> Tensor
- igammac_(Tensor  other) -> Tensor
- nextafter(Tensor  other) -> Tensor
- nextafter_(Tensor  other) -> Tensor
- remainder(Scalar other) -> Tensor
- remainder(Tensor  other) -> Tensor
- min() -> Tensor
- fmin(Tensor  other) -> Tensor
- max() -> Tensor
- fmax(Tensor  other) -> Tensor
- maximum(Tensor  other) -> Tensor
- max(Tensor  other) -> Tensor
- minimum(Tensor  other) -> Tensor
- min(Tensor  other) -> Tensor
- sort(int64_t dim=-1, bool descending=false) -> (Tensor,Tensor)
- sort(Dimname dim, bool descending=false) -> (Tensor,Tensor)
- msort() -> Tensor
- argsort(int64_t dim=-1, bool descending=false) -> Tensor
- argsort(Dimname dim, bool descending=false) -> Tensor
- topk(int64_t k, int64_t dim=-1, bool largest=true, bool sorted=true) -> (Tensor,Tensor)
- all() -> Tensor
- any() -> Tensor
- renorm(Scalar p, int64_t dim, Scalar maxnorm) -> Tensor
- unfold(int64_t dimension, int64_t size, int64_t step) -> Tensor
- equal(Tensor  other) -> bool
- pow(Tensor  exponent) -> Tensor
- pow(Scalar exponent) -> Tensor
- pow_(Scalar exponent) -> Tensor
- pow_(Tensor  exponent) -> Tensor
- float_power(Tensor  exponent) -> Tensor
- float_power(Scalar exponent) -> Tensor
- float_power_(Scalar exponent) -> Tensor
- float_power_(Tensor  exponent) -> Tensor
- alias() -> Tensor
