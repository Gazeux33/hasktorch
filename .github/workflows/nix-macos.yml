name: nix-macos

on: [push, pull_request]

jobs:
  # tests:
  #   runs-on: macOS-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: cachix/install-nix-action@v10
  #     - run: nix-env -iA cachix -f https://cachix.org/api/v1/install
  #     - run: cachix use hasktorch
  #     - run: cachix use iohk
  #     - run: |
  #         nix-build -j 2 -A haskellPackages.libtorch-ffi.checks.spec
  #         nix-build -j 2 -A haskellPackages.hasktorch.checks.spec
  #         nix-build -j 2 -A haskellPackages.examples.checks.spec
  build-cache:
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v2
      - uses: cachix/install-nix-action@v16
        with:
          install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install
          install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'
          extra_nix_config: |
            experimental-features = nix-command flakes
          nix_path: nixpkgs=channel:nixos-unstable
      - uses: cachix/cachix-action@v8
        with:
          name: hasktorch
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
      - run: |
          .github/workflows/setup-iohk-cache.sh
          sed -i -e 's/"x86_64-linux"//g' flake.nix
          nix flake show
      - run: |
          nix build '.#codegen:test:doctests' -L -j 1
          nix build '.#checks.x86_64-darwin.codegen:test:spec' -L -j 1
          nix build '.#checks.x86_64-darwin.hasktorch-cpu:test:spec' -L -j 1
          nix build '.#checks.x86_64-darwin.hasktorch-gradually-typed-cpu:test:spec' -L -j 1
          nix build '.#libtorch-ffi-cpu:test:spec' -L -j 1
          nix build '.#checks.x86_64-darwin.libtorch-ffi-cpu:test:spec' -L -j 1

          retry-nix-build () {
            echo $@
            nix build $@ -L || \
            (nix build $@ --dry-run --store https://hashtorch.cachix.org ; nix build $@ -L) || \
            (nix build $@ --dry-run --store https://hashtorch.cachix.org ; nix build $@ -L)
          }
          retry-nix-build '.#bounding-box-cpu:exe:bounding-box'
          retry-nix-build '.#codegen:exe:codegen-exe'
          retry-nix-build '.#dataloader-cifar10-cpu:exe:dataloader-cifar10'
          retry-nix-build '.#examples-cpu:exe:alexNet'
          retry-nix-build '.#examples-cpu:exe:autograd'
          retry-nix-build '.#examples-cpu:exe:distill'
          retry-nix-build '.#examples-cpu:exe:gaussian-process'
          retry-nix-build '.#examples-cpu:exe:gd-field'
          retry-nix-build '.#examples-cpu:exe:image-processing'
          retry-nix-build '.#examples-cpu:exe:iris-classification'
          retry-nix-build '.#examples-cpu:exe:load-torchscript'
          retry-nix-build '.#examples-cpu:exe:matrix-factorization'
          retry-nix-build '.#examples-cpu:exe:minimal-text-example'
          retry-nix-build '.#examples-cpu:exe:mnist-mixed-precision'
          retry-nix-build '.#examples-cpu:exe:mnist-mlp'
          retry-nix-build '.#examples-cpu:exe:optimizers'
          retry-nix-build '.#examples-cpu:exe:optimizers-cpp'
          retry-nix-build '.#examples-cpu:exe:optimizers-cpp-typed'
          retry-nix-build '.#examples-cpu:exe:regression'
          retry-nix-build '.#examples-cpu:exe:regularization'
          retry-nix-build '.#examples-cpu:exe:rnn'
          retry-nix-build '.#examples-cpu:exe:serialization'
          retry-nix-build '.#examples-cpu:exe:static-mnist-cnn'
          retry-nix-build '.#examples-cpu:exe:static-mnist-mlp'
          retry-nix-build '.#examples-cpu:exe:static-xor-mlp'
          retry-nix-build '.#examples-cpu:exe:typed-transformer'
          retry-nix-build '.#examples-cpu:exe:vae'
          retry-nix-build '.#examples-cpu:exe:xor-mlp'
          retry-nix-build '.#hasktorch-gradually-typed-cpu:exe:linear-regression'
          retry-nix-build '.#hasktorch-gradually-typed-cpu:exe:neural-interpreter'
          retry-nix-build '.#hasktorch-gradually-typed-cpu:exe:two-layer-network'
          retry-nix-build '.#untyped-nlp-cpu:exe:untyped-nlp'

