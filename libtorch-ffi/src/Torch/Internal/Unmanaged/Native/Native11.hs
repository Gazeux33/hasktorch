
-- generated by using spec/Declarations.yaml

{-# LANGUAGE DataKinds #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE QuasiQuotes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE OverloadedStrings #-}

module Torch.Internal.Unmanaged.Native.Native11 where


import Foreign.C.String
import Foreign.C.Types
import Foreign
import Torch.Internal.Type

import qualified Language.C.Inline.Cpp as C
import qualified Language.C.Inline.Cpp.Exceptions as C
import qualified Language.C.Inline.Context as C
import qualified Language.C.Types as C

C.context $ C.cppCtx <> mempty { C.ctxTypesTable = typeTable }

C.include "<vector>"
C.include "<ATen/Tensor.h>"
C.include "<ATen/Functions.h>"


all_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
all_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::all(
    *$(at::Tensor* _self)));
  }|]

any_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
any_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::any(
    *$(at::Tensor* _self)));
  }|]

renorm_out_ttsls
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> Int64
  -> Ptr Scalar
  -> IO (Ptr Tensor)
renorm_out_ttsls _out _self _p _dim _maxnorm =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::renorm_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _p)
  , $(int64_t _dim)
  , *$(at::Scalar* _maxnorm)));
  }|]

renorm_tsls
  :: Ptr Tensor
  -> Ptr Scalar
  -> Int64
  -> Ptr Scalar
  -> IO (Ptr Tensor)
renorm_tsls _self _p _dim _maxnorm =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::renorm(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _p)
  , $(int64_t _dim)
  , *$(at::Scalar* _maxnorm)));
  }|]

unfold_backward_tllll
  :: Ptr Tensor
  -> Ptr IntArray
  -> Int64
  -> Int64
  -> Int64
  -> IO (Ptr Tensor)
unfold_backward_tllll _grad_in _input_sizes _dim _size _step =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::unfold_backward(
    *$(at::Tensor* _grad_in)
  , *$(std::vector<int64_t>* _input_sizes)
  , $(int64_t _dim)
  , $(int64_t _size)
  , $(int64_t _step)));
  }|]

equal_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (CBool)
equal_tt _self _other =
  [C.throwBlock| bool { return (at::equal(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _other)));
  }|]

pow_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
pow_out_ttt _out _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::pow_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _exponent)));
  }|]

pow_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
pow_tt _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::pow(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _exponent)));
  }|]

pow_out_tst
  :: Ptr Tensor
  -> Ptr Scalar
  -> Ptr Tensor
  -> IO (Ptr Tensor)
pow_out_tst _out _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::pow_out(
    *$(at::Tensor* _out)
  , *$(at::Scalar* _self)
  , *$(at::Tensor* _exponent)));
  }|]

pow_st
  :: Ptr Scalar
  -> Ptr Tensor
  -> IO (Ptr Tensor)
pow_st _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::pow(
    *$(at::Scalar* _self)
  , *$(at::Tensor* _exponent)));
  }|]

pow_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
pow_out_tts _out _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::pow_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _exponent)));
  }|]

pow_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
pow_ts _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::pow(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _exponent)));
  }|]

float_power_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
float_power_out_ttt _out _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::float_power_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _exponent)));
  }|]

float_power_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
float_power_tt _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::float_power(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _exponent)));
  }|]

float_power_out_tst
  :: Ptr Tensor
  -> Ptr Scalar
  -> Ptr Tensor
  -> IO (Ptr Tensor)
float_power_out_tst _out _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::float_power_out(
    *$(at::Tensor* _out)
  , *$(at::Scalar* _self)
  , *$(at::Tensor* _exponent)));
  }|]

float_power_st
  :: Ptr Scalar
  -> Ptr Tensor
  -> IO (Ptr Tensor)
float_power_st _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::float_power(
    *$(at::Scalar* _self)
  , *$(at::Tensor* _exponent)));
  }|]

float_power_out_tts
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
float_power_out_tts _out _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::float_power_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Scalar* _exponent)));
  }|]

float_power_ts
  :: Ptr Tensor
  -> Ptr Scalar
  -> IO (Ptr Tensor)
float_power_ts _self _exponent =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::float_power(
    *$(at::Tensor* _self)
  , *$(at::Scalar* _exponent)));
  }|]

normal_out_ttdG
  :: Ptr Tensor
  -> Ptr Tensor
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_out_ttdG _out _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _mean)
  , $(double _std)
  , *$(at::Generator* _generator)));
  }|]

normal_out_ttd
  :: Ptr Tensor
  -> Ptr Tensor
  -> CDouble
  -> IO (Ptr Tensor)
normal_out_ttd _out _mean _std =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _mean)
  , $(double _std)));
  }|]

normal_out_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
normal_out_tt _out _mean =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _mean)));
  }|]

normal_tdG
  :: Ptr Tensor
  -> CDouble
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_tdG _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    *$(at::Tensor* _mean)
  , $(double _std)
  , *$(at::Generator* _generator)));
  }|]

normal_td
  :: Ptr Tensor
  -> CDouble
  -> IO (Ptr Tensor)
normal_td _mean _std =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    *$(at::Tensor* _mean)
  , $(double _std)));
  }|]

normal_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
normal_t _mean =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    *$(at::Tensor* _mean)));
  }|]

normal_out_tdtG
  :: Ptr Tensor
  -> CDouble
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_out_tdtG _out _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , $(double _mean)
  , *$(at::Tensor* _std)
  , *$(at::Generator* _generator)));
  }|]

normal_out_tdt
  :: Ptr Tensor
  -> CDouble
  -> Ptr Tensor
  -> IO (Ptr Tensor)
normal_out_tdt _out _mean _std =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , $(double _mean)
  , *$(at::Tensor* _std)));
  }|]

normal_dtG
  :: CDouble
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_dtG _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    $(double _mean)
  , *$(at::Tensor* _std)
  , *$(at::Generator* _generator)));
  }|]

normal_dt
  :: CDouble
  -> Ptr Tensor
  -> IO (Ptr Tensor)
normal_dt _mean _std =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    $(double _mean)
  , *$(at::Tensor* _std)));
  }|]

normal_out_tttG
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_out_tttG _out _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _mean)
  , *$(at::Tensor* _std)
  , *$(at::Generator* _generator)));
  }|]

normal_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
normal_out_ttt _out _mean _std =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _mean)
  , *$(at::Tensor* _std)));
  }|]

normal_ttG
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_ttG _mean _std _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    *$(at::Tensor* _mean)
  , *$(at::Tensor* _std)
  , *$(at::Generator* _generator)));
  }|]

normal_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
normal_tt _mean _std =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    *$(at::Tensor* _mean)
  , *$(at::Tensor* _std)));
  }|]

normal_ddlGo
  :: CDouble
  -> CDouble
  -> Ptr IntArray
  -> Ptr Generator
  -> Ptr TensorOptions
  -> IO (Ptr Tensor)
normal_ddlGo _mean _std _size _generator _options =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    $(double _mean)
  , $(double _std)
  , *$(std::vector<int64_t>* _size)
  , *$(at::Generator* _generator)
  , *$(at::TensorOptions* _options)));
  }|]

normal_ddlG
  :: CDouble
  -> CDouble
  -> Ptr IntArray
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_ddlG _mean _std _size _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    $(double _mean)
  , $(double _std)
  , *$(std::vector<int64_t>* _size)
  , *$(at::Generator* _generator)));
  }|]

normal_ddl
  :: CDouble
  -> CDouble
  -> Ptr IntArray
  -> IO (Ptr Tensor)
normal_ddl _mean _std _size =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal(
    $(double _mean)
  , $(double _std)
  , *$(std::vector<int64_t>* _size)));
  }|]

normal_out_tddlG
  :: Ptr Tensor
  -> CDouble
  -> CDouble
  -> Ptr IntArray
  -> Ptr Generator
  -> IO (Ptr Tensor)
normal_out_tddlG _out _mean _std _size _generator =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , $(double _mean)
  , $(double _std)
  , *$(std::vector<int64_t>* _size)
  , *$(at::Generator* _generator)));
  }|]

normal_out_tddl
  :: Ptr Tensor
  -> CDouble
  -> CDouble
  -> Ptr IntArray
  -> IO (Ptr Tensor)
normal_out_tddl _out _mean _std _size =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::normal_out(
    *$(at::Tensor* _out)
  , $(double _mean)
  , $(double _std)
  , *$(std::vector<int64_t>* _size)));
  }|]

alias_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
alias_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::alias(
    *$(at::Tensor* _self)));
  }|]

_index_copy__tltt
  :: Ptr Tensor
  -> Int64
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
_index_copy__tltt _self _dim _index _source =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_index_copy_(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , *$(at::Tensor* _index)
  , *$(at::Tensor* _source)));
  }|]

_cumsum_tl
  :: Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_cumsum_tl _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cumsum(
    *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_cumsum_out_ttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_cumsum_out_ttl _out _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cumsum_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_cumprod_tl
  :: Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_cumprod_tl _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cumprod(
    *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_cumprod_out_ttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr Tensor)
_cumprod_out_ttl _out _self _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cumprod_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_var_tb
  :: Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
_var_tb _self _unbiased =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_var(
    *$(at::Tensor* _self)
  , $(bool _unbiased)));
  }|]

_var_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_var_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_var(
    *$(at::Tensor* _self)));
  }|]

_std_tb
  :: Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
_std_tb _self _unbiased =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_std(
    *$(at::Tensor* _self)
  , $(bool _unbiased)));
  }|]

_std_t
  :: Ptr Tensor
  -> IO (Ptr Tensor)
_std_t _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_std(
    *$(at::Tensor* _self)));
  }|]

_amp_foreach_non_finite_check_and_unscale__ltt
  :: Ptr TensorList
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (())
_amp_foreach_non_finite_check_and_unscale__ltt _self _found_inf _inv_scale =
  [C.throwBlock| void {  (at::_amp_foreach_non_finite_check_and_unscale_(
    *$(std::vector<at::Tensor>* _self)
  , *$(at::Tensor* _found_inf)
  , *$(at::Tensor* _inv_scale)));
  }|]

_amp_update_scale_tttddl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CDouble
  -> CDouble
  -> Int64
  -> IO (Ptr Tensor)
_amp_update_scale_tttddl _growth_tracker _current_scale _found_inf _scale_growth_factor _scale_backoff_factor _growth_interval =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_amp_update_scale(
    *$(at::Tensor* _growth_tracker)
  , *$(at::Tensor* _current_scale)
  , *$(at::Tensor* _found_inf)
  , $(double _scale_growth_factor)
  , $(double _scale_backoff_factor)
  , $(int64_t _growth_interval)));
  }|]

_cat_ll
  :: Ptr TensorList
  -> Int64
  -> IO (Ptr Tensor)
_cat_ll _tensors _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cat(
    *$(std::vector<at::Tensor>* _tensors)
  , $(int64_t _dim)));
  }|]

_cat_l
  :: Ptr TensorList
  -> IO (Ptr Tensor)
_cat_l _tensors =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cat(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_cat_out_tll
  :: Ptr Tensor
  -> Ptr TensorList
  -> Int64
  -> IO (Ptr Tensor)
_cat_out_tll _out _tensors _dim =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cat_out(
    *$(at::Tensor* _out)
  , *$(std::vector<at::Tensor>* _tensors)
  , $(int64_t _dim)));
  }|]

_cat_out_tl
  :: Ptr Tensor
  -> Ptr TensorList
  -> IO (Ptr Tensor)
_cat_out_tl _out _tensors =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::_cat_out(
    *$(at::Tensor* _out)
  , *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_add_ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_add_ls _tensors _scalar =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_add(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_add__ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_add__ls _self _scalar =
  [C.throwBlock| void {  (at::_foreach_add_(
    *$(std::vector<at::Tensor>* _self)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_sub_ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_sub_ls _tensors _scalar =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sub(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_sub__ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_sub__ls _self _scalar =
  [C.throwBlock| void {  (at::_foreach_sub_(
    *$(std::vector<at::Tensor>* _self)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_mul_ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_mul_ls _tensors _scalar =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_mul(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_mul__ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_mul__ls _self _scalar =
  [C.throwBlock| void {  (at::_foreach_mul_(
    *$(std::vector<at::Tensor>* _self)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_div_ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_div_ls _tensors _scalar =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_div(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_div__ls
  :: Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_div__ls _self _scalar =
  [C.throwBlock| void {  (at::_foreach_div_(
    *$(std::vector<at::Tensor>* _self)
  , *$(at::Scalar* _scalar)));
  }|]

_foreach_add_lls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_add_lls _tensors1 _tensors2 _alpha =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_add(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)
  , *$(at::Scalar* _alpha)));
  }|]

_foreach_add_ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_add_ll _tensors1 _tensors2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_add(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)));
  }|]

_foreach_add__lls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_add__lls _self _other _alpha =
  [C.throwBlock| void {  (at::_foreach_add_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _other)
  , *$(at::Scalar* _alpha)));
  }|]

_foreach_add__ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (())
_foreach_add__ll _self _other =
  [C.throwBlock| void {  (at::_foreach_add_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _other)));
  }|]

_foreach_sub_lls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_sub_lls _tensors1 _tensors2 _alpha =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sub(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)
  , *$(at::Scalar* _alpha)));
  }|]

_foreach_sub_ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_sub_ll _tensors1 _tensors2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sub(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)));
  }|]

_foreach_sub__lls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_sub__lls _self _other _alpha =
  [C.throwBlock| void {  (at::_foreach_sub_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _other)
  , *$(at::Scalar* _alpha)));
  }|]

_foreach_sub__ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (())
_foreach_sub__ll _self _other =
  [C.throwBlock| void {  (at::_foreach_sub_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _other)));
  }|]

_foreach_mul_ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_mul_ll _tensors1 _tensors2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_mul(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)));
  }|]

_foreach_mul__ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (())
_foreach_mul__ll _self _other =
  [C.throwBlock| void {  (at::_foreach_mul_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _other)));
  }|]

_foreach_div_ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_div_ll _tensors1 _tensors2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_div(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)));
  }|]

_foreach_div__ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (())
_foreach_div__ll _self _other =
  [C.throwBlock| void {  (at::_foreach_div_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _other)));
  }|]

_foreach_add_la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (Ptr TensorList)
_foreach_add_la _tensors _scalars =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_add(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_add__la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (())
_foreach_add__la _self _scalars =
  [C.throwBlock| void {  (at::_foreach_add_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_sub_la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (Ptr TensorList)
_foreach_sub_la _tensors _scalars =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sub(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_sub__la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (())
_foreach_sub__la _self _scalars =
  [C.throwBlock| void {  (at::_foreach_sub_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_div_la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (Ptr TensorList)
_foreach_div_la _tensors _scalars =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_div(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_div__la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (())
_foreach_div__la _self _scalars =
  [C.throwBlock| void {  (at::_foreach_div_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_mul_la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (Ptr TensorList)
_foreach_mul_la _tensors _scalars =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_mul(
    *$(std::vector<at::Tensor>* _tensors)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_mul__la
  :: Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (())
_foreach_mul__la _self _scalars =
  [C.throwBlock| void {  (at::_foreach_mul_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_exp_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_exp_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_exp(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_zero__l
  :: Ptr TensorList
  -> IO (())
_foreach_zero__l _self =
  [C.throwBlock| void {  (at::_foreach_zero_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_exp__l
  :: Ptr TensorList
  -> IO (())
_foreach_exp__l _self =
  [C.throwBlock| void {  (at::_foreach_exp_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_sqrt_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_sqrt_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sqrt(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_sqrt__l
  :: Ptr TensorList
  -> IO (())
_foreach_sqrt__l _self =
  [C.throwBlock| void {  (at::_foreach_sqrt_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_abs_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_abs_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_abs(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_abs__l
  :: Ptr TensorList
  -> IO (())
_foreach_abs__l _self =
  [C.throwBlock| void {  (at::_foreach_abs_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_acos_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_acos_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_acos(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_acos__l
  :: Ptr TensorList
  -> IO (())
_foreach_acos__l _self =
  [C.throwBlock| void {  (at::_foreach_acos_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_asin_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_asin_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_asin(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_asin__l
  :: Ptr TensorList
  -> IO (())
_foreach_asin__l _self =
  [C.throwBlock| void {  (at::_foreach_asin_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_atan_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_atan_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_atan(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_atan__l
  :: Ptr TensorList
  -> IO (())
_foreach_atan__l _self =
  [C.throwBlock| void {  (at::_foreach_atan_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_ceil_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_ceil_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_ceil(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_ceil__l
  :: Ptr TensorList
  -> IO (())
_foreach_ceil__l _self =
  [C.throwBlock| void {  (at::_foreach_ceil_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_cos_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_cos_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_cos(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_cos__l
  :: Ptr TensorList
  -> IO (())
_foreach_cos__l _self =
  [C.throwBlock| void {  (at::_foreach_cos_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_cosh_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_cosh_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_cosh(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_cosh__l
  :: Ptr TensorList
  -> IO (())
_foreach_cosh__l _self =
  [C.throwBlock| void {  (at::_foreach_cosh_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_erf_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_erf_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_erf(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_erf__l
  :: Ptr TensorList
  -> IO (())
_foreach_erf__l _self =
  [C.throwBlock| void {  (at::_foreach_erf_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_erfc_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_erfc_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_erfc(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_erfc__l
  :: Ptr TensorList
  -> IO (())
_foreach_erfc__l _self =
  [C.throwBlock| void {  (at::_foreach_erfc_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_expm1_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_expm1_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_expm1(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_expm1__l
  :: Ptr TensorList
  -> IO (())
_foreach_expm1__l _self =
  [C.throwBlock| void {  (at::_foreach_expm1_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_floor_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_floor_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_floor(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_floor__l
  :: Ptr TensorList
  -> IO (())
_foreach_floor__l _self =
  [C.throwBlock| void {  (at::_foreach_floor_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_log_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_log_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_log(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_log__l
  :: Ptr TensorList
  -> IO (())
_foreach_log__l _self =
  [C.throwBlock| void {  (at::_foreach_log_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_log10_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_log10_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_log10(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_log10__l
  :: Ptr TensorList
  -> IO (())
_foreach_log10__l _self =
  [C.throwBlock| void {  (at::_foreach_log10_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_log1p_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_log1p_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_log1p(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_log1p__l
  :: Ptr TensorList
  -> IO (())
_foreach_log1p__l _self =
  [C.throwBlock| void {  (at::_foreach_log1p_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_log2_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_log2_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_log2(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_log2__l
  :: Ptr TensorList
  -> IO (())
_foreach_log2__l _self =
  [C.throwBlock| void {  (at::_foreach_log2_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_neg_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_neg_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_neg(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_neg__l
  :: Ptr TensorList
  -> IO (())
_foreach_neg__l _self =
  [C.throwBlock| void {  (at::_foreach_neg_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_tan_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_tan_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_tan(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_tan__l
  :: Ptr TensorList
  -> IO (())
_foreach_tan__l _self =
  [C.throwBlock| void {  (at::_foreach_tan_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_tanh_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_tanh_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_tanh(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_tanh__l
  :: Ptr TensorList
  -> IO (())
_foreach_tanh__l _self =
  [C.throwBlock| void {  (at::_foreach_tanh_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_sin_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_sin_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sin(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_sin__l
  :: Ptr TensorList
  -> IO (())
_foreach_sin__l _self =
  [C.throwBlock| void {  (at::_foreach_sin_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_sinh_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_sinh_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sinh(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_sinh__l
  :: Ptr TensorList
  -> IO (())
_foreach_sinh__l _self =
  [C.throwBlock| void {  (at::_foreach_sinh_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_round_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_round_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_round(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_round__l
  :: Ptr TensorList
  -> IO (())
_foreach_round__l _self =
  [C.throwBlock| void {  (at::_foreach_round_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_lgamma_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_lgamma_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_lgamma(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_lgamma__l
  :: Ptr TensorList
  -> IO (())
_foreach_lgamma__l _self =
  [C.throwBlock| void {  (at::_foreach_lgamma_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_frac_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_frac_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_frac(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_frac__l
  :: Ptr TensorList
  -> IO (())
_foreach_frac__l _self =
  [C.throwBlock| void {  (at::_foreach_frac_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_reciprocal_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_reciprocal_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_reciprocal(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_reciprocal__l
  :: Ptr TensorList
  -> IO (())
_foreach_reciprocal__l _self =
  [C.throwBlock| void {  (at::_foreach_reciprocal_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_sigmoid_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_sigmoid_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_sigmoid(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_sigmoid__l
  :: Ptr TensorList
  -> IO (())
_foreach_sigmoid__l _self =
  [C.throwBlock| void {  (at::_foreach_sigmoid_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_trunc_l
  :: Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_trunc_l _tensors =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_trunc(
    *$(std::vector<at::Tensor>* _tensors)));
  }|]

_foreach_trunc__l
  :: Ptr TensorList
  -> IO (())
_foreach_trunc__l _self =
  [C.throwBlock| void {  (at::_foreach_trunc_(
    *$(std::vector<at::Tensor>* _self)));
  }|]

_foreach_addcdiv__llls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_addcdiv__llls _self _tensor1 _tensor2 _value =
  [C.throwBlock| void {  (at::_foreach_addcdiv_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_foreach_addcdiv__lll
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> IO (())
_foreach_addcdiv__lll _self _tensor1 _tensor2 =
  [C.throwBlock| void {  (at::_foreach_addcdiv_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)));
  }|]

_foreach_addcmul__llls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (())
_foreach_addcmul__llls _self _tensor1 _tensor2 _value =
  [C.throwBlock| void {  (at::_foreach_addcmul_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_foreach_addcmul__lll
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> IO (())
_foreach_addcmul__lll _self _tensor1 _tensor2 =
  [C.throwBlock| void {  (at::_foreach_addcmul_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)));
  }|]

_foreach_addcdiv__llla
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (())
_foreach_addcdiv__llla _self _tensor1 _tensor2 _scalars =
  [C.throwBlock| void {  (at::_foreach_addcdiv_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_addcmul__llla
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (())
_foreach_addcmul__llla _self _tensor1 _tensor2 _scalars =
  [C.throwBlock| void {  (at::_foreach_addcmul_(
    *$(std::vector<at::Tensor>* _self)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_addcdiv_llls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_addcdiv_llls _input _tensor1 _tensor2 _value =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_addcdiv(
    *$(std::vector<at::Tensor>* _input)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_foreach_addcdiv_lll
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_addcdiv_lll _input _tensor1 _tensor2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_addcdiv(
    *$(std::vector<at::Tensor>* _input)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)));
  }|]

_foreach_addcmul_llls
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr Scalar
  -> IO (Ptr TensorList)
_foreach_addcmul_llls _input _tensor1 _tensor2 _value =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_addcmul(
    *$(std::vector<at::Tensor>* _input)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(at::Scalar* _value)));
  }|]

_foreach_addcmul_lll
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_addcmul_lll _input _tensor1 _tensor2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_addcmul(
    *$(std::vector<at::Tensor>* _input)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)));
  }|]

_foreach_addcdiv_llla
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (Ptr TensorList)
_foreach_addcdiv_llla _input _tensor1 _tensor2 _scalars =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_addcdiv(
    *$(std::vector<at::Tensor>* _input)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_addcmul_llla
  :: Ptr TensorList
  -> Ptr TensorList
  -> Ptr TensorList
  -> Ptr (StdVector CDouble)
  -> IO (Ptr TensorList)
_foreach_addcmul_llla _input _tensor1 _tensor2 _scalars =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_addcmul(
    *$(std::vector<at::Tensor>* _input)
  , *$(std::vector<at::Tensor>* _tensor1)
  , *$(std::vector<at::Tensor>* _tensor2)
  , *$(std::vector<double>* _scalars)));
  }|]

_foreach_maximum_ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_maximum_ll _tensors1 _tensors2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_maximum(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)));
  }|]

_foreach_minimum_ll
  :: Ptr TensorList
  -> Ptr TensorList
  -> IO (Ptr TensorList)
_foreach_minimum_ll _tensors1 _tensors2 =
  [C.throwBlock| std::vector<at::Tensor>* { return new std::vector<at::Tensor>(at::_foreach_minimum(
    *$(std::vector<at::Tensor>* _tensors1)
  , *$(std::vector<at::Tensor>* _tensors2)));
  }|]

_mode_tlb
  :: Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (StdTuple '(Tensor,Tensor)))
_mode_tlb _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_mode(
    *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_mode_tl
  :: Ptr Tensor
  -> Int64
  -> IO (Ptr (StdTuple '(Tensor,Tensor)))
_mode_tl _self _dim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_mode(
    *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_mode_t
  :: Ptr Tensor
  -> IO (Ptr (StdTuple '(Tensor,Tensor)))
_mode_t _self =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_mode(
    *$(at::Tensor* _self)));
  }|]

_mode_out_tttlb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> CBool
  -> IO (Ptr (StdTuple '(Tensor,Tensor)))
_mode_out_tttlb _values _indices _self _dim _keepdim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_mode_out(
    *$(at::Tensor* _values)
  , *$(at::Tensor* _indices)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)
  , $(bool _keepdim)));
  }|]

_mode_out_tttl
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> Int64
  -> IO (Ptr (StdTuple '(Tensor,Tensor)))
_mode_out_tttl _values _indices _self _dim =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_mode_out(
    *$(at::Tensor* _values)
  , *$(at::Tensor* _indices)
  , *$(at::Tensor* _self)
  , $(int64_t _dim)));
  }|]

_mode_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr (StdTuple '(Tensor,Tensor)))
_mode_out_ttt _values _indices _self =
  [C.throwBlock| std::tuple<at::Tensor,at::Tensor>* { return new std::tuple<at::Tensor,at::Tensor>(at::_mode_out(
    *$(at::Tensor* _values)
  , *$(at::Tensor* _indices)
  , *$(at::Tensor* _self)));
  }|]

bucketize_ttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
bucketize_ttbb _self _boundaries _out_int32 _right =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _boundaries)
  , $(bool _out_int32)
  , $(bool _right)));
  }|]

bucketize_ttb
  :: Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
bucketize_ttb _self _boundaries _out_int32 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _boundaries)
  , $(bool _out_int32)));
  }|]

bucketize_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
bucketize_tt _self _boundaries =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize(
    *$(at::Tensor* _self)
  , *$(at::Tensor* _boundaries)));
  }|]

bucketize_out_tttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
bucketize_out_tttbb _out _self _boundaries _out_int32 _right =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _boundaries)
  , $(bool _out_int32)
  , $(bool _right)));
  }|]

bucketize_out_tttb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
bucketize_out_tttb _out _self _boundaries _out_int32 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _boundaries)
  , $(bool _out_int32)));
  }|]

bucketize_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
bucketize_out_ttt _out _self _boundaries =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _self)
  , *$(at::Tensor* _boundaries)));
  }|]

bucketize_stbb
  :: Ptr Scalar
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
bucketize_stbb _self _boundaries _out_int32 _right =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize(
    *$(at::Scalar* _self)
  , *$(at::Tensor* _boundaries)
  , $(bool _out_int32)
  , $(bool _right)));
  }|]

bucketize_stb
  :: Ptr Scalar
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
bucketize_stb _self _boundaries _out_int32 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize(
    *$(at::Scalar* _self)
  , *$(at::Tensor* _boundaries)
  , $(bool _out_int32)));
  }|]

bucketize_st
  :: Ptr Scalar
  -> Ptr Tensor
  -> IO (Ptr Tensor)
bucketize_st _self _boundaries =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::bucketize(
    *$(at::Scalar* _self)
  , *$(at::Tensor* _boundaries)));
  }|]

searchsorted_ttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
searchsorted_ttbb _sorted_sequence _self _out_int32 _right =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::searchsorted(
    *$(at::Tensor* _sorted_sequence)
  , *$(at::Tensor* _self)
  , $(bool _out_int32)
  , $(bool _right)));
  }|]

searchsorted_ttb
  :: Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
searchsorted_ttb _sorted_sequence _self _out_int32 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::searchsorted(
    *$(at::Tensor* _sorted_sequence)
  , *$(at::Tensor* _self)
  , $(bool _out_int32)));
  }|]

searchsorted_tt
  :: Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
searchsorted_tt _sorted_sequence _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::searchsorted(
    *$(at::Tensor* _sorted_sequence)
  , *$(at::Tensor* _self)));
  }|]

searchsorted_out_tttbb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> CBool
  -> IO (Ptr Tensor)
searchsorted_out_tttbb _out _sorted_sequence _self _out_int32 _right =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::searchsorted_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _sorted_sequence)
  , *$(at::Tensor* _self)
  , $(bool _out_int32)
  , $(bool _right)));
  }|]

searchsorted_out_tttb
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> CBool
  -> IO (Ptr Tensor)
searchsorted_out_tttb _out _sorted_sequence _self _out_int32 =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::searchsorted_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _sorted_sequence)
  , *$(at::Tensor* _self)
  , $(bool _out_int32)));
  }|]

searchsorted_out_ttt
  :: Ptr Tensor
  -> Ptr Tensor
  -> Ptr Tensor
  -> IO (Ptr Tensor)
searchsorted_out_ttt _out _sorted_sequence _self =
  [C.throwBlock| at::Tensor* { return new at::Tensor(at::searchsorted_out(
    *$(at::Tensor* _out)
  , *$(at::Tensor* _sorted_sequence)
  , *$(at::Tensor* _self)));
  }|]

